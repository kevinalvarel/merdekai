import React, { useState, useRef, useEffect } from "react";
import MessageInput from "./MessageInput";
import Profil from "/public/logo.png";
import Image from "next/image";
import { IconArrowLeft, IconBrain } from "@tabler/icons-react";

export default function QuizChatArea({ quizType, onBackToSelection }) {
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Auto-send initial quiz message when component mounts
  useEffect(() => {
    if (quizType && messages.length === 0) {
      const initialMessage = `Saya ingin memulai quiz tentang "${
        quizType.title
      }". Langsung berikan saya pertanyaan quiz pertama dengan format:

**PERTANYAAN QUIZ ${quizType.title.toUpperCase()}**

[Nomor]. [Pertanyaan]

A. [Pilihan A]
B. [Pilihan B] 
C. [Pilihan C]
D. [Pilihan D]

Tingkat kesulitan: ${quizType.difficulty}. 

JANGAN berikan sapaan atau penjelasan lain, langsung mulai dengan pertanyaan quiz. Setelah saya menjawab, berikan penjelasan apakah benar/salah lalu lanjutkan pertanyaan berikutnya.`;

      // Add initial user message
      const userMessage = {
        id: Date.now(),
        text: `Memulai quiz: ${quizType.title}`,
        sender: "user",
        isAutoGenerated: true,
      };

      setMessages([userMessage]);
      setIsLoading(true);

      // Send to AI with delay to prevent duplicate
      setTimeout(() => {
        sendToAI(initialMessage);
      }, 100);
    }
  }, [quizType]);

  const sendToAI = async (messageText) => {
    try {
      const res = await fetch("http://localhost:3001/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: messageText }),
      });

      const data = await res.json();

      setMessages((prev) => [
        ...prev,
        { id: Date.now() + Math.random(), text: data.reply, sender: "ai" },
      ]);
    } catch (err) {
      console.error(err);
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now() + Math.random(),
          text: "⚠️ Error: Gagal mendapatkan pertanyaan quiz. Silakan coba lagi.",
          sender: "ai",
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSend = async (message) => {
    if ((!message.text && !message.image) || isLoading) return;

    const newMessage = {
      id: Date.now() + Math.random(),
      text: message.text,
      image: message.image,
      sender: "user",
    };
    setMessages((prev) => [...prev, newMessage]);
    setIsLoading(true);

    if (message.image) {
      try {
        const res = await fetch("http://localhost:3001/image", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            message: message.image,
            messagetxt: message.text,
          }),
        });

        const data = await res.json();

        setMessages((prev) => [
          ...prev,
          { id: Date.now() + Math.random(), text: data.reply, sender: "ai" },
        ]);
      } catch (err) {
        console.error(err);
        setMessages((prev) => [
          ...prev,
          {
            id: Date.now() + Math.random(),
            text: "⚠️ Error: gagal ambil balasan.",
            sender: "ai",
          },
        ]);
      } finally {
        setIsLoading(false);
      }
    } else {
      // Untuk pesan text biasa
      await sendToAI(message.text);
    }
  };

  const handleQuickAnswer = async (answer) => {
    if (isLoading) return;

    // Buat jawaban yang sangat spesifik
    const answerText = `Jawaban saya: ${answer}

Sekarang:
1. Katakan apakah jawaban ${answer} BENAR atau SALAH
2. Berikan penjelasan singkat mengapa
3. Langsung berikan pertanyaan quiz berikutnya dengan format yang sama (A, B, C, D)

Jangan berikan komentar lain, langsung jawab sesuai format di atas.`;

    const newMessage = {
      id: Date.now() + Math.random(),
      text: answer, // Tampilkan hanya huruf jawaban di chat
      sender: "user",
      isQuickAnswer: true,
    };
    setMessages((prev) => [...prev, newMessage]);
    setIsLoading(true);

    // Kirim dengan instruksi yang lebih tegas
    await sendToAI(answerText);
  };

  return (
    <div className="flex-1 flex flex-col h-full bg-white">
      {/* Quiz Header */}
      <div className="border-b bg-white shadow-sm">
        <div className="max-w-6xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={onBackToSelection}
                className="flex items-center space-x-2 text-gray-600 hover:text-red-600 transition-colors"
              >
                <IconArrowLeft className="h-5 w-5" />
                <span className="text-sm font-medium">Kembali</span>
              </button>
              <div className="h-6 w-px bg-gray-300"></div>
              <div className="flex items-center space-x-3">
                <div
                  className={`w-10 h-10 bg-gradient-to-r ${quizType.color} rounded-lg flex items-center justify-center text-white`}
                >
                  {quizType.icon}
                </div>
                <div>
                  <h1 className="text-lg font-bold text-gray-800">
                    {quizType.title}
                  </h1>
                  <p className="text-sm text-gray-600">
                    Tingkat: {quizType.difficulty}
                  </p>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2 text-sm text-gray-500">
              <IconBrain className="h-4 w-4" />
              <span>Quiz Mode</span>
            </div>
          </div>
        </div>
      </div>

      {/* Chat Messages Area */}
      <div className="flex-1 overflow-hidden">
        <div className="h-full overflow-y-auto">
          <div className="px-6 py-6 space-y-6 w-full max-w-6xl mx-auto">
            {messages.map((msg) => (
              <MessageBubble key={msg.id} message={msg} />
            ))}
            {isLoading && <TypingIndicator />}
            <div ref={messagesEndRef} />
          </div>
        </div>
      </div>

      {/* Quick Answer Buttons & Message Input Area */}
      <div className="border-t bg-white">
        <div className="max-w-6xl mx-auto">
          {/* Quick Answer Buttons */}
          <QuickAnswerButtons
            onAnswerSelect={handleQuickAnswer}
            isLoading={isLoading}
          />
          <MessageInput
            onSend={handleSend}
            isLoading={isLoading}
            placeholder="Atau ketik jawaban/pertanyaan Anda..."
          />
        </div>
      </div>
    </div>
  );
}

function MessageBubble({ message }) {
  const isUser = message.sender === "user";

  return (
    <div
      className={`flex items-start gap-3 ${isUser ? "flex-row-reverse" : ""}`}
    >
      {/* Avatar */}
      <div
        className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium ${
          isUser
            ? "bg-red-500 text-white"
            : "bg-gray-100 text-gray-600 border-2 border-gray-200"
        }`}
      >
        {isUser ? (
          "U"
        ) : (
          <Image src={Profil} height={50} width={50} alt="profile" />
        )}
      </div>

      {/* Message Content */}
      <div className={`flex-1 ${isUser ? "text-right" : ""}`}>
        <div
          className={`inline-block rounded-2xl text-sm leading-relaxed max-w-full ${
            isUser
              ? "bg-red-500 text-white rounded-br-md"
              : "bg-gray-100 text-gray-800 rounded-bl-md border border-gray-200"
          } ${message.image && !message.text ? "p-1" : "px-4 py-3"}`}
        >
          {/* Quick answer indicator */}
          {message.isQuickAnswer && (
            <div className="text-xs text-red-200 mb-2 italic flex items-center gap-1">
              <svg
                className="w-3 h-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M13 10V3L4 14h7v7l9-11h-7z"
                />
              </svg>
              Jawaban cepat
            </div>
          )}

          {/* Auto-generated message indicator */}
          {message.isAutoGenerated && (
            <div className="text-xs text-red-200 mb-2 italic">
              Pesan otomatis untuk memulai quiz
            </div>
          )}

          {/* Show image if exists */}
          {message.image && (
            <div className={message.text ? "mb-3" : ""}>
              <div className="relative group">
                <img
                  src={message.image}
                  alt="sent image"
                  className={`max-w-full max-h-80 object-cover shadow-lg transition-transform duration-200 group-hover:scale-[1.02] cursor-pointer ${
                    message.text ? "rounded-lg" : "rounded-xl"
                  }`}
                  onClick={() => {
                    // Create a modal to view full image
                    const modal = document.createElement("div");
                    modal.className =
                      "fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 cursor-pointer";
                    modal.onclick = () => modal.remove();

                    const img = document.createElement("img");
                    img.src = message.image;
                    img.className =
                      "max-w-[90vw] max-h-[90vh] object-contain rounded-lg";
                    img.onclick = (e) => e.stopPropagation();

                    modal.appendChild(img);
                    document.body.appendChild(modal);
                  }}
                />
                {/* Image overlay for better visual feedback */}
                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-200 rounded-lg flex items-center justify-center opacity-0 group-hover:opacity-100">
                  <svg
                    className="w-8 h-8 text-white drop-shadow-lg"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"
                    />
                  </svg>
                </div>
              </div>
              {/* Image info */}
              <div
                className={`text-xs mt-2 ${
                  isUser ? "text-red-100" : "text-gray-500"
                } flex items-center gap-1`}
              >
                <svg
                  className="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                  />
                </svg>
                <span>Klik untuk memperbesar</span>
              </div>
            </div>
          )}
          {message.text && (
            <div className="whitespace-pre-wrap break-words">
              <FormattedText text={message.text} />
            </div>
          )}
        </div>

        {/* Timestamp */}
        <div
          className={`text-xs text-gray-400 mt-1 px-1 ${
            isUser ? "text-right" : ""
          }`}
        >
          {new Date().toLocaleTimeString([], {
            hour: "2-digit",
            minute: "2-digit",
          })}
        </div>
      </div>
    </div>
  );
}

function TypingIndicator() {
  return (
    <div className="flex items-start gap-3">
      {/* AI Avatar */}
      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-100 text-gray-600 border-2 border-gray-200 flex items-center justify-center text-xs font-medium">
        <Image src={Profil} height={50} width={50} alt="profile" />
      </div>

      {/* Typing Animation */}
      <div className="bg-gray-100 border border-gray-200 rounded-2xl rounded-bl-md px-4 py-3">
        <div className="flex items-center space-x-1">
          <div className="flex space-x-1">
            <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>
            <div
              className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"
              style={{ animationDelay: "0.2s" }}
            ></div>
            <div
              className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"
              style={{ animationDelay: "0.4s" }}
            ></div>
          </div>
          <span className="text-xs text-gray-500 ml-2">
            AI sedang menyiapkan pertanyaan...
          </span>
        </div>
      </div>
    </div>
  );
}

function FormattedText({ text }) {
  const formatText = (text) => {
    // Split by lines to handle line-based formatting
    const lines = text.split("\n");
    const formattedLines = [];

    lines.forEach((line, lineIndex) => {
      // Check for separator line (---)
      if (line.trim() === "---") {
        formattedLines.push(
          <div
            key={`separator-${lineIndex}`}
            className="my-3 border-t border-gray-300"
          ></div>
        );
        return;
      }

      // Check for heading (### text)
      const headingMatch = line.match(/^###\s+(.+)/);
      if (headingMatch) {
        // Apply inline formatting to heading content too
        const headingContent = formatInlineText(headingMatch[1], lineIndex);
        formattedLines.push(
          <h3
            key={`heading-${lineIndex}`}
            className="text-lg font-semibold text-gray-800 mt-4 mb-2"
          >
            {headingContent}
          </h3>
        );
        return;
      }

      // For regular lines, apply inline formatting
      const formattedLine = formatInlineText(line, lineIndex);
      if (line.trim() !== "") {
        formattedLines.push(
          <div key={`line-${lineIndex}`} className="mb-1">
            {formattedLine}
          </div>
        );
      } else {
        // Empty line
        formattedLines.push(<br key={`br-${lineIndex}`} />);
      }
    });

    return formattedLines;
  };

  const formatInlineText = (text, lineIndex) => {
    // Replace **text** with bold
    const boldRegex = /\*\*(.*?)\*\*/g;
    // Replace *text* with italic
    const italicRegex = /\*(.*?)\*/g;
    // Replace `code` with inline code
    const codeRegex = /`(.*?)`/g;

    let parts = [];
    let lastIndex = 0;

    // First handle bold text
    const boldMatches = [...text.matchAll(boldRegex)];
    const italicMatches = [...text.matchAll(italicRegex)];
    const codeMatches = [...text.matchAll(codeRegex)];

    // Combine all matches and sort by index
    const allMatches = [
      ...boldMatches.map((m) => ({ ...m, type: "bold" })),
      ...italicMatches.map((m) => ({ ...m, type: "italic" })),
      ...codeMatches.map((m) => ({ ...m, type: "code" })),
    ].sort((a, b) => a.index - b.index);

    // Remove overlapping matches (prioritize bold over italic)
    const filteredMatches = [];
    for (let i = 0; i < allMatches.length; i++) {
      const current = allMatches[i];
      const isOverlapping = filteredMatches.some(
        (existing) =>
          (current.index >= existing.index &&
            current.index < existing.index + existing[0].length) ||
          (existing.index >= current.index &&
            existing.index < current.index + current[0].length)
      );

      if (!isOverlapping) {
        filteredMatches.push(current);
      }
    }

    filteredMatches.forEach((match, index) => {
      // Add text before the match
      if (match.index > lastIndex) {
        parts.push(
          <span key={`text-${lineIndex}-${index}`}>
            {text.slice(lastIndex, match.index)}
          </span>
        );
      }

      // Add the formatted match
      const content = match[1];
      if (match.type === "bold") {
        parts.push(
          <strong key={`bold-${lineIndex}-${index}`} className="font-bold">
            {content}
          </strong>
        );
      } else if (match.type === "italic") {
        parts.push(
          <em key={`italic-${lineIndex}-${index}`} className="italic">
            {content}
          </em>
        );
      } else if (match.type === "code") {
        parts.push(
          <code
            key={`code-${lineIndex}-${index}`}
            className="bg-gray-200 px-1 py-0.5 rounded text-sm font-mono"
          >
            {content}
          </code>
        );
      }

      lastIndex = match.index + match[0].length;
    });

    // Add remaining text
    if (lastIndex < text.length) {
      parts.push(
        <span key={`text-end-${lineIndex}`}>{text.slice(lastIndex)}</span>
      );
    }

    return parts.length > 0 ? parts : [text];
  };

  return <div>{formatText(text)}</div>;
}

function QuickAnswerButtons({ onAnswerSelect, isLoading }) {
  const answers = ["A", "B", "C", "D"];

  return (
    <div className="px-6 py-4 border-b border-gray-100">
      <div className="flex items-center justify-center space-x-3">
        <span className="text-sm text-gray-600 font-medium">
          Pilihan Jawaban:
        </span>
        <div className="flex space-x-2">
          {answers.map((answer) => (
            <button
              key={answer}
              onClick={() => onAnswerSelect(answer)}
              disabled={isLoading}
              className={`w-12 h-12 rounded-full font-bold text-lg transition-all duration-200 ${
                isLoading
                  ? "bg-gray-200 text-gray-400 cursor-not-allowed"
                  : "bg-red-500 text-white hover:bg-red-600 hover:scale-110 active:scale-95 shadow-lg hover:shadow-xl"
              }`}
            >
              {answer}
            </button>
          ))}
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
          <span className="text-xs text-gray-500">
            Klik untuk menjawab cepat
          </span>
        </div>
      </div>
    </div>
  );
}
